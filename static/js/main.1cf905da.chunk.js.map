{"version":3,"sources":["theme.js","device.js","components/Card/Card.styled.js","components/Card/Card.js","components/Slider/Slider.js","utils/forecast.js","utils/forecastImage.js","containers/Forecast/components/TodaysWeatherCard/TodaysWeatherCard.js","containers/Forecast/components/ForecastSliderCard/ForecastSliderCard.js","services/weatherService.js","containers/Forecast/Forecast.styled.js","containers/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["theme","colors","main","white","fonts","secondary","shadows","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","CardWrapper","styled","div","props","Card","children","Slider","slides","config","map","slide","buildDailyForecastFromList","list","daysHolder","currentArrayIndexInDaysHolder","forEach","forecast","index","forecastList","currentForecast","lastForecast","moment","unix","dt","isSame","push","length","buildWeatherForDayUsingForecasts","dayForecast","mins","maxs","pictures","temp_min","temp_max","weather","icon","min","Math","apply","max","mode","array","modeMap","maxEl","maxCount","i","el","getWeatherImage","imageName","TodaysWeatherCardWrapper","TodaysWeatherCardDate","span","TodaysWeatherCardLeft","TodaysWeatherCardRight","TodaysWeatherCardTitle","rem","TodaysWeatherCardWeather","TodaysWeatherCardImage","img","TodaysWeatherCard","Fragment","local","format","ceil","temp","src","ForecastSliderCardWrapper","ForecastSliderCardImage","ForecastSliderInfo","ForecastSliderCardTitle","ForecastSliderCard","forecastedWeather","commonParams","id","appid","process","units","getCurrentWeather","a","axios","get","params","getFiveDaysForecast","ForecastWrapper","ForecastSliderWrapper","sliderConfiguration","pagination","clickable","slidesPerView","spaceBetween","observer","Forecast","state","currentWeather","data","forecastArrangedByDays","forecastPerDay","console","log","this","setState","key","Component","App","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1cf905da.chunk.js","sourcesContent":["const theme = {\n  colors: {\n    main: \"red\",\n    white: \"white\"\n  },\n  fonts: {\n    main: \"Poppins\",\n    secondary: \"Nunito\"\n  },\n  shadows: {\n    main: \"rgba(52, 69, 89, 0.2) 0px 6px 8px 0px\"\n  }\n};\n\nexport default theme;\n","const size = {\n  mobileS: \"320px\",\n  mobileM: \"375px\",\n  mobileL: \"425px\",\n  tablet: \"768px\",\n  laptop: \"1024px\",\n  laptopL: \"1440px\",\n  desktop: \"2560px\"\n};\n\nexport const device = {\n  mobileS: `(min-width: ${size.mobileS})`,\n  mobileM: `(min-width: ${size.mobileM})`,\n  mobileL: `(min-width: ${size.mobileL})`,\n  tablet: `(min-width: ${size.tablet})`,\n  laptop: `(min-width: ${size.laptop})`,\n  laptopL: `(min-width: ${size.laptopL})`,\n  desktop: `(min-width: ${size.desktop})`,\n  desktopL: `(min-width: ${size.desktop})`\n};\n","import styled from \"styled-components\";\n\nexport const CardWrapper = styled.div`\n  background-color: ${props => props.theme.colors.white};\n  border-radius: 18px;\n  box-shadow: ${props => props.theme.shadows.main};\n  margin: 16px 0;\n  padding: 8px 16px;\n  box-sizing: border-box;\n  font-family: ${props => props.theme.fonts.main};\n`;\n","import React from \"react\";\n\n// Styles\nimport { CardWrapper } from \"./Card.styled\";\n\nconst Card = ({ children, ...props }) => {\n  return <CardWrapper {...props}>{children && children}</CardWrapper>;\n};\n\nexport default Card;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Swiper from \"react-id-swiper\";\n\n// Styles\n// Version >= 2.4.0\nimport \"swiper/css/swiper.css\";\n\nconst Slider = ({ slides, config }) => (\n  <Swiper {...config}>\n    {slides && slides.map(slide => <div>{slide}</div>)}\n  </Swiper>\n);\n\nSlider.propTypes = {\n  slides: PropTypes.array.isRequired,\n  config: PropTypes.object\n};\n\nexport default Slider;\n","import moment from \"moment\";\n\n/**\n * The following takes a list of forecasts, each with a timestamp.\n * It groups the forecasts per day and return an array of forecasts\n * for all the days the list has.\n * @param {Array} list - The list with forecast at certain point of time\n */\nexport const buildDailyForecastFromList = list => {\n  const daysHolder = [];\n  let currentArrayIndexInDaysHolder = 0;\n\n  list.forEach((forecast, index, forecastList) => {\n    let currentForecast = forecast;\n    let lastForecast = index - 1 >= 0 ? forecastList[index - 1] : forecast;\n\n    // Check if currentForecast is same day as lastForecast\n    if (\n      moment\n        .unix(currentForecast.dt)\n        .isSame(moment.unix(lastForecast.dt), \"day\")\n    ) {\n      /**\n       * If current index does not exist within \"daysHolder\", create a new array (new day),\n       * push it to the days array and change the current index, as a new array has been created\n       * and the last index is not the old one.\n       *\n       * Finally, push the forecast to the correct index (day)\n       */\n      if (typeof daysHolder[currentArrayIndexInDaysHolder] === \"undefined\") {\n        let newDayInDaysHolder = [];\n        daysHolder.push(newDayInDaysHolder);\n\n        currentArrayIndexInDaysHolder = daysHolder.length - 1;\n      }\n\n      daysHolder[currentArrayIndexInDaysHolder].push(currentForecast);\n    } else {\n      let newDayInDaysHolder = [];\n      daysHolder.push(newDayInDaysHolder);\n\n      currentArrayIndexInDaysHolder = daysHolder.length - 1;\n\n      daysHolder[currentArrayIndexInDaysHolder].push(currentForecast);\n    }\n  });\n\n  return daysHolder;\n};\n\n/**\n * Builds a forecast applying simple math to the group of forecasts\n * @param {Array} dayForecast - An array containing the forecast for an specific time\n * within the day\n */\nexport const buildWeatherForDayUsingForecasts = dayForecast => {\n  let mins = [];\n  let maxs = [];\n  let pictures = [];\n\n  dayForecast.forEach(forecast => {\n    mins.push(forecast.main.temp_min);\n    maxs.push(forecast.main.temp_max);\n    pictures.push(forecast.weather[0].icon);\n  });\n\n  const dayWeather = {\n    min: Math.min.apply(null, mins),\n    max: Math.max.apply(null, maxs),\n    icon: mode(pictures)\n  };\n\n  return dayWeather;\n};\n\nconst mode = array => {\n  if (array.length === 0) return null;\n\n  let modeMap = {};\n  let maxEl = array[0];\n  let maxCount = 1;\n\n  for (let i = 0; i < array.length; i++) {\n    let el = array[i];\n    if (modeMap[el] == null) modeMap[el] = 1;\n    else modeMap[el]++;\n    if (modeMap[el] > maxCount) {\n      maxEl = el;\n      maxCount = modeMap[el];\n    }\n  }\n\n  return maxEl;\n};\n","export const getWeatherImage = imageName => {\n  return `http://openweathermap.org/img/wn/${imageName}@2x.png`;\n};\n","import React from \"react\";\nimport moment from \"moment\";\n\nimport styled from \"styled-components\";\nimport { rem } from \"polished\";\nimport { device } from \"../../../../device\";\n\n// Components\nimport { Card } from \"../../../../components\";\n\n// Utils\nimport {getWeatherImage} from \"../../../../utils\";\n\n// Styles\nconst TodaysWeatherCardWrapper = styled.div`\n  display: flex;\n`;\n\nconst TodaysWeatherCardDate = styled.span`\n  padding: 8px;\n  color: ${props => props.theme.colors.white};\n  background: #0077ff;\n  display: block;\n  border-radius: 8px;\n  margin-bottom: 16px;\n  font-weight: 800;\n  width: fit-content;\n`;\n\nconst TodaysWeatherCardLeft = styled.div`\n  flex-grow: 2;\n`;\n\nconst TodaysWeatherCardRight = styled.div`\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TodaysWeatherCardTitle = styled.span`\n  font-size: ${rem(\"22px\")};\n  font-weight: 500;\n  display: block;\n`;\n\nconst TodaysWeatherCardWeather = styled.span`\n  font-size: ${rem(\"120px\")};\n  line-height: 100%;\n  display: block;\n\n  @media ${device.mobileS} {\n    font-size: ${rem(\"60px\")};\n  }\n\n  @media ${device.mobileM} {\n    font-size: ${rem(\"90px\")};\n  }\n`;\n\nconst TodaysWeatherCardImage = styled.img`\n  display: block;\n`;\n\nconst TodaysWeatherCard = ({ weather }) => {\n  return (\n    <React.Fragment>\n      {weather && (\n        <Card>\n          <TodaysWeatherCardDate>\n            {`Hoy · ${moment\n              .unix(weather.dt)\n              .local()\n              .format(\"DD/MM/YYYY\")}`}\n          </TodaysWeatherCardDate>\n          <TodaysWeatherCardWrapper>\n            <TodaysWeatherCardLeft>\n              <TodaysWeatherCardTitle>Ahora:</TodaysWeatherCardTitle>\n              <TodaysWeatherCardWeather>\n                {`${Math.ceil(weather.main.temp)}ºC`}\n              </TodaysWeatherCardWeather>\n            </TodaysWeatherCardLeft>\n            <TodaysWeatherCardRight>\n              <TodaysWeatherCardImage\n                src={getWeatherImage(weather.weather[0].icon)}\n              />\n            </TodaysWeatherCardRight>\n          </TodaysWeatherCardWrapper>\n        </Card>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TodaysWeatherCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// UI Components\nimport { Card } from \"./../../../../components\";\n\n// Utils\nimport { getWeatherImage } from \"../../../../utils\";\n\n// Styles\nconst ForecastSliderCardWrapper = styled(Card)`\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ForecastSliderCardImage = styled.img`\n  margin: auto;\n  display: block;\n`;\n\nconst ForecastSliderInfo = styled.div``;\n\nconst ForecastSliderCardTitle = styled.span`\n  display: block;\n  font-weight: 800;\n  text-align: center;\n`;\n\nconst ForecastSliderCard = ({ forecastedWeather }) => {\n  return (\n    <ForecastSliderCardWrapper>\n      <ForecastSliderCardImage src={getWeatherImage(forecastedWeather.icon)} />\n      <ForecastSliderInfo>\n        <ForecastSliderCardTitle>{`Min: ${Math.ceil(\n          forecastedWeather.min\n        )}ºC`}</ForecastSliderCardTitle>\n        <ForecastSliderCardTitle>{`Min: ${Math.ceil(\n          forecastedWeather.max\n        )}ºC`}</ForecastSliderCardTitle>\n      </ForecastSliderInfo>\n    </ForecastSliderCardWrapper>\n  );\n};\n\nexport default ForecastSliderCard;\n","import axios from \"axios\";\n\nconst ENDPOINT_HOST = \"https://api.openweathermap.org/data/2.5\";\nconst WEATHER_ENDPOINT_PATH = \"weather\";\nconst FORECAST_ENDPOINT_PATH = \"forecast\";\n\nconst DEFAULT_CITY = \"3873544\";\n\nconst WEATHER_API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nconst commonParams = {\n  id: DEFAULT_CITY,\n  appid: WEATHER_API_KEY,\n  units: \"metric\"\n};\n\nexport const getCurrentWeather = async () => {\n  return axios.get(`${ENDPOINT_HOST}/${WEATHER_ENDPOINT_PATH}`, {\n    params: {\n      ...commonParams\n    }\n  });\n};\n\nexport const getFiveDaysForecast = async () => {\n  return axios.get(`${ENDPOINT_HOST}/${FORECAST_ENDPOINT_PATH}`, {\n    params: {\n      ...commonParams\n    }\n  });\n};\n","import styled from \"styled-components\";\nimport { rem } from \"polished\";\n\nexport const ForecastWrapper = styled.div`\n  height: 100%;\n  width: 100%;\n  padding: ${rem(\"24px\")};\n  background-color: #eff6ff;\n  box-sizing: border-box;\n`;\n\nexport const ForecastSliderWrapper = styled.div`\n  width: 100%;\n  margin: 24px 0;\n`;\n","import React, { Component } from \"react\";\n\n// UI Components\nimport { TodaysWeatherCard, ForecastSliderCard } from \"./components\";\nimport { Slider, Card } from \"./../../components\";\n\n// Services\nimport { getCurrentWeather, getFiveDaysForecast } from \"./../../services\";\n\n// Utils\nimport {\n  buildDailyForecastFromList,\n  buildWeatherForDayUsingForecasts\n} from \"../../utils\";\n\n// Styles\nimport { ForecastWrapper, ForecastSliderWrapper } from \"./Forecast.styled\";\n\n// Slider configuration\nconst sliderConfiguration = {\n  pagination: {\n    clickable: true\n  },\n  slidesPerView: 2,\n  spaceBetween: 22,\n  observer: true\n};\n\nexport default class Forecast extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { currentWeather: null };\n  }\n\n  async componentDidMount() {\n    try {\n      const currentWeather = await (await getCurrentWeather()).data;\n      const forecastedWeather = await (await getFiveDaysForecast()).data;\n      const forecastArrangedByDays = buildDailyForecastFromList(\n        forecastedWeather.list\n      );\n      const forecastPerDay = forecastArrangedByDays.map(forecast =>\n        buildWeatherForDayUsingForecasts(forecast)\n      );\n\n      console.log(forecastPerDay);\n\n      this.setState({\n        currentWeather,\n        forecastPerDay\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    const { currentWeather, forecastPerDay } = this.state;\n\n    return (\n      <ForecastWrapper>\n        <TodaysWeatherCard weather={currentWeather} />\n        <ForecastSliderWrapper>\n          <Slider\n            config={sliderConfiguration}\n            slides={\n              forecastPerDay\n                ? forecastPerDay.map(forecast => (\n                    <ForecastSliderCard\n                      forecastedWeather={forecast}\n                      key={forecast.min}\n                    />\n                  ))\n                : [<Card />]\n            }\n          />\n        </ForecastSliderWrapper>\n      </ForecastWrapper>\n    );\n  }\n}\n","import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\n\n// Containers (Views)\nimport { Forecast } from \"./containers\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ThemeProvider theme={theme}>\n        <Router>\n          <Switch>\n            <Route path=\"/forecast\" component={Forecast} />\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}